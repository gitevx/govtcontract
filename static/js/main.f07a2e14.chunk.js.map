{"version":3,"sources":["contracts/marketplace_approval.teal","contracts/marketplace_clear.teal","utils/conversions.js","components/Cover.jsx","components/utils/Identicon.jsx","components/Wallet.jsx","components/marketplace/AddProduct.jsx","components/marketplace/Product.jsx","components/utils/Loader.jsx","components/utils/Notifications.jsx","components/marketplace/Products.jsx","assets/img/govt.jpg","App.js","reportWebVitals.js","index.js","utils/marketplace.js","utils/constants.js"],"names":["truncateAddress","address","slice","length","microAlgosToString","num","BigNumber","shiftedBy","ALGORAND_DECIMALS","toFixed","stringToMicroAlgos","str","toNumber","base64ToUTF8String","base64String","Buffer","from","toString","utf8ToBase64String","utf8String","Cover","name","coverImg","connect","className","style","maxWidth","src","alt","Button","onClick","variant","Identicon","size","rest","width","height","diameter","seed","parseInt","Wallet","amount","symbol","disconnect","Dropdown","Toggle","align","id","Spinner","animation","Menu","Item","href","target","Stack","direction","gap","Divider","as","domain","AddProduct","createProduct","useState","setName","image","setImage","document","setDocument","date","setDate","description","setDescription","price","setPrice","isFormFilled","useCallback","show","setShow","handleClose","Modal","onHide","centered","Header","closeButton","Title","Form","Body","FloatingLabel","controlId","label","Control","type","value","onChange","e","placeholder","Select","Footer","disabled","Product","product","buyProduct","deleteProduct","sold","appId","owner","count","Col","Card","Badge","bg","display","objectFit","margin","Link","Text","color","Subtitle","Loader","role","Notification","position","autoClose","hideProgressBar","newestOnTop","closeOnClick","rtl","pauseOnFocusLoss","draggable","pauseOnHover","NotificationSuccess","text","NotificationError","DefaultProps","defaultProps","Products","fetchBalance","products","setProducts","loading","setLoading","getProducts","getProductsAction","then","catch","error","console","log","finally","_","useEffect","data","createProductAction","toast","buyProductAction","deleteProductAction","Row","xs","sm","lg","map","index","App","setAddress","balance","setBalance","accountAddress","indexerClient","lookupAccountByID","do","response","_balance","account","connectWallet","myAlgoConnect","accounts","_account","Container","fluid","Nav","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","this","compileProgram","programSource","encoder","TextEncoder","programBytes","encode","algodClient","compile","compileResponse","Uint8Array","result","senderAddress","getTransactionParams","params","fee","algosdk","ALGORAND_MIN_TX_FEE","flatFee","approvalProgram","compiledApprovalProgram","clearProgram","compiledClearProgram","note","marketplaceNote","encodeUint64","appArgs","txn","makeApplicationCreateTxnFromObject","suggestedParams","onComplete","OnApplicationComplete","NoOpOC","numLocalInts","numLocalByteSlices","numLocalBytes","numGlobalInts","numGlobalByteSlices","numGlobalBytes","txId","txID","signTransaction","toByte","signedTxn","sendRawTransaction","blob","waitForConfirmation","confirmedTxn","pendingTransactionInformation","transactionResponse","buyArg","countArg","appCallTxn","makeApplicationCallTxnFromObject","appIndex","paymentTxn","makePaymentTxnWithSuggestedParamsFromObject","to","txnArray","groupID","computeGroupID","i","group","tx","makeApplicationDeleteTxnFromObject","apid","encodedNote","searchForTransactions","notePrefix","txType","minRound","transactionInfo","transactions","transaction","getApplication","push","lookupApplications","includeAll","application","deleted","globalState","creator","getField","fieldName","find","state","key","undefined","field","bytes","uint","config","Algodv2","Indexer","MyAlgoConnect"],"mappings":"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","file":"static/js/main.f07a2e14.chunk.js","sourcesContent":["export default \"#pragma version 6\\ntxn ApplicationID\\nint 0\\n==\\nbnz main_l8\\ntxn OnCompletion\\nint DeleteApplication\\n==\\nbnz main_l7\\ntxna ApplicationArgs 0\\nbyte \\\"buy\\\"\\n==\\nbnz main_l4\\nerr\\nmain_l4:\\nglobal GroupSize\\nint 2\\n==\\ngtxn 1 TypeEnum\\nint pay\\n==\\ngtxn 1 Receiver\\nglobal CreatorAddress\\n==\\n&&\\ngtxn 1 Amount\\nbyte \\\"PRICE\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n*\\n==\\n&&\\ngtxn 1 Sender\\ngtxn 0 Sender\\n==\\n&&\\n&&\\nbnz main_l6\\nint 0\\nreturn\\nmain_l6:\\nbyte \\\"SOLD\\\"\\nbyte \\\"SOLD\\\"\\napp_global_get\\ntxna ApplicationArgs 1\\nbtoi\\n+\\napp_global_put\\nint 1\\nreturn\\nmain_l7:\\ntxn Sender\\nglobal CreatorAddress\\n==\\nreturn\\nmain_l8:\\ntxn NumAppArgs\\nint 6\\n==\\nassert\\ntxn Note\\nbyte \\\"govtcontract:uv1\\\"\\n==\\nassert\\ntxna ApplicationArgs 5\\nbtoi\\nint 0\\n>\\nassert\\nbyte \\\"NAME\\\"\\ntxna ApplicationArgs 0\\napp_global_put\\nbyte \\\"IMAGE\\\"\\ntxna ApplicationArgs 1\\napp_global_put\\nbyte \\\"DOCUMENT\\\"\\ntxna ApplicationArgs 2\\napp_global_put\\nbyte \\\"DATE\\\"\\ntxna ApplicationArgs 3\\napp_global_put\\nbyte \\\"DESCRIPTION\\\"\\ntxna ApplicationArgs 4\\napp_global_put\\nbyte \\\"PRICE\\\"\\ntxna ApplicationArgs 5\\nbtoi\\napp_global_put\\nbyte \\\"SOLD\\\"\\nint 0\\napp_global_put\\nint 1\\nreturn\";","export default \"#pragma version 6\\nint 1\\nreturn\";","\nimport {ALGORAND_DECIMALS} from \"./constants\";\nimport BigNumber from \"bignumber.js\";\n\n//...\n\n// Truncate is done in the middle to allow for checking of first and last chars simply to ensure correct address\nexport const truncateAddress = (address) => {\n    if (!address) return\n    return address.slice(0, 5) + \"...\" + address.slice(address.length - 5, address.length);\n}\n\n// Amounts in microAlgos (e.g. 10500) are shown as algos (e.g. 10.5) in the frontend\nexport const microAlgosToString = (num) => {\n    if (!num) return\n    let bigNumber = new BigNumber(num)\n    return bigNumber.shiftedBy(-ALGORAND_DECIMALS).toFixed(3);\n}\n\n// Convert an amount entered as algos (e.g. 10.5) to microAlgos (e.g. 10500)\nexport const stringToMicroAlgos = (str) => {\n    if (!str) return\n    let bigNumber = new BigNumber(str)\n    return bigNumber.shiftedBy(ALGORAND_DECIMALS).toNumber();\n}\n\n\nexport const base64ToUTF8String = (base64String) => {\n    return Buffer.from(base64String, 'base64').toString(\"utf-8\")\n}\n\nexport const utf8ToBase64String = (utf8String) => {\n    return Buffer.from(utf8String, 'utf8').toString('base64')\n}","import React from 'react';\nimport {Button} from \"react-bootstrap\";\nimport PropTypes from 'prop-types';\n\nconst Cover = ({name, coverImg, connect}) => {\n    return (\n        <div className=\"gradient-custom d-flex justify-content-center flex-column text-center min-vh-100\">\n            <div className=\"mt-auto text-dark mb-5\">\n                <div\n                    className=\" ratio ratio-1x1 mx-auto mb-2\"\n                    style={{maxWidth: \"320px\"}}\n                >\n                    <img src={coverImg} alt=\"\"/>\n                </div>\n                <h1>{name}</h1>\n                <p>Identify yourself with your entity wallet to negotiate Public Sector contracts</p>\n                <Button\n                    onClick={() => connect()}\n                    variant=\"outline-dark\"\n                    className=\"rounded-pill px-3 mt-3\"\n                >\n                    Secure Identification\n                </Button>\n\n            </div>\n            <p className=\"mt-auto text-secondary\">Powered by Algorand</p>\n        </div>\n    );\n};\n\nCover.propTypes = {\n    name: PropTypes.string,\n    coverImg: PropTypes.string,\n    connect: PropTypes.func\n};\n\nexport default Cover;","import Jazzicon from \"react-jazzicon\";\nimport PropTypes from \"prop-types\";\n\nconst Identicon = ({size, address, ...rest}) => (\n    <div {...rest} style={{width: `${size}px`, height: `${size}px`}}>\n        <Jazzicon diameter={size} seed={parseInt(address.slice(2, 10), 16)}/>\n    </div>\n);\n\nIdenticon.propTypes = {\n    size: PropTypes.number.isRequired,\n    address: PropTypes.string.isRequired\n};\n\nexport default Identicon;","import React from 'react';\nimport {Dropdown, Spinner, Stack} from 'react-bootstrap';\nimport {microAlgosToString, truncateAddress} from '../utils/conversions';\nimport Identicon from './utils/Identicon'\nimport PropTypes from \"prop-types\";\n\nconst Wallet = ({address, name, amount, symbol, disconnect}) => {\n    if (!address) {\n        return null;\n    }\n    return (\n        <>\n            <Dropdown>\n                <Dropdown.Toggle variant=\"light\" align=\"end\" id=\"dropdown-basic\"\n                                 className=\"d-flex align-items-center border rounded-pill py-1\">\n                    {amount ? (\n                        <>\n                            {microAlgosToString(amount)}\n                            <span className=\"ms-1\"> {symbol}</span>\n                        </>\n                    ) : (\n                        <Spinner animation=\"border\" size=\"sm\" className=\"opacity-25\"/>\n                    )}\n                    <Identicon address={address} size={28} className=\"ms-2 me-1\"/>\n                </Dropdown.Toggle>\n\n                <Dropdown.Menu className=\"shadow-lg border-0\">\n                    <Dropdown.Item href={`https://testnet.algoexplorer.io/address/${address}`}\n                                   target=\"_blank\">\n                        <Stack direction=\"horizontal\" gap={2}>\n                            <i className=\"bi bi-person-circle fs-4\"/>\n                            <div className=\"d-flex flex-column\">\n                                {name && (<span className=\"font-monospace\">{name}</span>)}\n                                <span className=\"font-monospace\">{truncateAddress(address)}</span>\n                            </div>\n                        </Stack>\n                    </Dropdown.Item>\n                    <Dropdown.Divider/>\n                    <Dropdown.Item as=\"button\" className=\"d-flex align-items-center\" onClick={() => {\n                        disconnect();\n                    }}>\n                        <i className=\"bi bi-box-arrow-right me-2 fs-4\"/>\n                        Disconnect\n                    </Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </>\n    )\n};\n\nWallet.propTypes = {\n    address: PropTypes.string,\n    name: PropTypes.string,\n    amount: PropTypes.number,\n    symbol: PropTypes.string,\n    disconnect: PropTypes.func\n};\n\nexport default Wallet;","import React, {useCallback, useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Button, FloatingLabel, Form, Modal} from \"react-bootstrap\";\nimport {stringToMicroAlgos} from \"../../utils/conversions\";\n\n\n//change the domain here for correct image download\nconst domain = \"https://gitevx.github.io/govtcontract/ \";\n\nconst AddProduct = ({createProduct}) => {\n    const [name, setName] = useState(\"\");\n    const [image, setImage] = useState(\"\");\n    const [document, setDocument] = useState(\"\");\n    const [date, setDate] = useState(\"\");\n    const [description, setDescription] = useState(\"\");\n    const [price, setPrice] = useState(0);\n\n    const isFormFilled = useCallback(() => {\n        return name && image && document && date && description && price > 0\n    }, [name, image, document, date, description, price]);\n\n    const [show, setShow] = useState(false);\n\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n//...\n//...\nreturn (\n    <>\n        <Button\n            onClick={handleShow}\n            variant=\"dark\"\n            className=\"rounded-pill px-0\"\n            style={{width: \"300px\"}}\n        >\n           Government Entities: request new tender procedure\n        </Button>\n        <Modal show={show} onHide={handleClose} centered>\n            <Modal.Header closeButton>\n                <Modal.Title>New Tender</Modal.Title>\n            </Modal.Header>\n            <Form>\n                <Modal.Body>\n                    <FloatingLabel\n                        controlId=\"inputName\"\n                        label=\"Tender name\"\n                        className=\"mb-3\"\n                    >\n                        <Form.Control\n                            type=\"text\"\n                            value={name}\n                            onChange={(e) => {\n                                setName(e.target.value);\n                            }}\n                            placeholder=\"Enter name of the tender\"\n                        />\n                    </FloatingLabel>\n                    <FloatingLabel\n                        controlId=\"inputUrl\"\n                        label=\"Select contract type\"\n                        className=\"mb-3\"    \n                    >\n                            <Form.Select aria-label=\"Default select example\"\n                            value={image}\n                            onChange={(e) => {\n                                setImage(e.target.value);\n                            }}>\n      <option>Available Services</option>\n      <option value= {`${domain}algorand-marketplace/services/electricity.png`}>Electricity</option>\n      <option value={`${domain}algorand-marketplace/services/communications.png`}>Communications</option>\n      <option value={`${domain}algorand-marketplace/services/legal.png`}>Legal</option>\n      <option value={`${domain}algorand-marketplace/services/it.png`}>IT</option>\n      <option value={`${domain}algorand-marketplace/services/crypto.png`}>Crypto</option>\n    </Form.Select>\n\n\n                    </FloatingLabel>\n                    \n                    <FloatingLabel\n                        controlId=\"inputUrlPdf\"\n                        label=\"Contract Documentation URL (PDF)\"\n                        className=\"mb-3\"    \n                    >\n\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Select contract type\"\n                            value={document}\n                            onChange={(e) => {\n                                setDocument(e.target.value);\n                            }}\n                        />\n                    </FloatingLabel>\n\n\n                    <FloatingLabel\n                        controlId=\"inputEta\"\n                        label=\"Due date\"\n                        className=\"mb-3\"\n                    >\n                        <Form.Control\n                            type=\"date\"\n                            value={date}\n                            onChange={(e) => {\n                                setDate(e.target.value);\n                            }}\n                            placeholder=\"Enter the due date\"\n                        />\n                    </FloatingLabel>\n\n                    <FloatingLabel\n                        controlId=\"inputDescription\"\n                        label=\"Description\"\n                        className=\"mb-3\"\n                    >\n                        <Form.Control\n                            as=\"textarea\"\n                            placeholder=\"description\"\n                            style={{ height: \"120px\" }}\n                            onChange={(e) => {\n                                setDescription(e.target.value);\n                            }}\n                        />\n                    </FloatingLabel>\n                    <FloatingLabel\n                        controlId=\"inputPrice\"\n                        label=\"Maximum Bid amount in ALGO\"\n                        className=\"mb-3\"\n                    >\n                        <Form.Control\n                            type=\"text\"\n                            placeholder=\"Price\"\n                            onChange={(e) => {\n                                setPrice(stringToMicroAlgos(e.target.value));\n                            }}\n                        />\n                    </FloatingLabel>\n                </Modal.Body>\n            </Form>\n            <Modal.Footer>\n                <Button variant=\"outline-secondary\" onClick={handleClose}>\n                    Close\n                </Button>\n                <Button\n                    variant=\"dark\"\n                    disabled={!isFormFilled()}\n                    onClick={() => {\n                        createProduct({\n                            name,\n                            image,\n                            document,\n                            date,\n                            description,\n                            price\n                        });\n                        handleClose();\n                    }}\n                >\n                    Publish tender\n                </Button>\n            </Modal.Footer>\n        </Modal>\n    </>\n);\n};\n\nAddProduct.propTypes = {\ncreateProduct: PropTypes.func.isRequired,\n};\n\nexport default AddProduct;","import React, {useState} from \"react\";\nimport PropTypes from \"prop-types\";\nimport {Badge, Button, Card, Col, FloatingLabel, Form, Stack} from \"react-bootstrap\";\nimport {microAlgosToString, truncateAddress} from \"../../utils/conversions\";\nimport Identicon from \"../utils/Identicon\";\n\nconst Product = ({address, product, buyProduct, deleteProduct}) => {\n    const {name, image, document, date, description, price, sold, appId, owner} =\n        product;\n\n    const [count, setCount] = useState(1)\n\n    return (\n        <Col key={appId}>\n            <Card className=\"h-100\">\n                <Card.Header>\n                    <Stack direction=\"horizontal\" gap={2}>\n                        <span className=\"font-monospace text-secondary\">{truncateAddress(owner)}</span>\n                        <Identicon size={28} address={owner}/>\n                        <Badge bg=\"secondary\" className=\"ms-auto\">\n                            {sold} Tender applications: \n                        </Badge>\n                    </Stack>\n                </Card.Header>\n                <div className=\"ratio-4x3\" style={{display: \"flex\"}}>\n                    <img src={image} alt={name} style={{objectFit: \"cover\", width: 200, margin: \"auto\"}}/>\n                </div>\n                <Card.Body className=\"d-flex flex-column text-center\">\n                    <Card.Title>{name}</Card.Title>\n                    <Card.Link className=\"flex-grow-1\" href={document} target=\"_blank\">Link to the tender documents</Card.Link>\n                    <Card.Text className=\"flex-grow-1\" style={{color: \"red\"}}>{`Document submission due date: ${date}`}</Card.Text>\n                    <Card.Subtitle>Contract description</Card.Subtitle>\n                    <Card.Text className=\"flex-grow-1\">{description}</Card.Text>\n                    <Form className=\"d-flex align-content-stretch flex-row gap-2\">\n                        {/* <FloatingLabel\n                            controlId=\"inputCount\"\n                            label=\"Count\"\n                            className=\"w-25\"\n                        >\n                            <Form.Control\n                                type=\"number\"\n                                value={count}\n                                min=\"1\"\n                                max=\"10\"\n                                onChange={(e) => {\n                                    setCount(Number(e.target.value));\n                                }}\n                            />\n                        </FloatingLabel> */}\n                        <Button\n                            variant=\"outline-dark\"\n                            onClick={() => buyProduct(product, count)}\n                            className=\"w-75 py-3\"\n                        >\n                            Accept tender for:{microAlgosToString(price) * count} ALGO\n                        </Button>\n                        {product.owner === address &&\n                            <Button\n                                variant=\"outline-danger\"\n                                onClick={() => deleteProduct(product)}\n                                className=\"btn\"\n                            >\n                                <i className=\"bi bi-trash\"></i>\n                            </Button>\n                        }\n                    </Form>\n                </Card.Body>\n            </Card>\n        </Col>\n    );\n};\n\nProduct.propTypes = {\n    address: PropTypes.string.isRequired,\n    product: PropTypes.instanceOf(Object).isRequired,\n    buyProduct: PropTypes.func.isRequired,\n    deleteProduct: PropTypes.func.isRequired\n};\n\nexport default Product;","import React from \"react\";\nimport {Spinner} from \"react-bootstrap\";\n\nconst Loader = () => (\n    <div className=\"d-flex justify-content-center\">\n        <Spinner animation=\"border\" role=\"status\" className=\"opacity-25\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </Spinner>\n    </div>\n);\n\nexport default Loader;","import React from \"react\";\nimport {ToastContainer} from \"react-toastify\";\nimport PropTypes from \"prop-types\";\n\nconst Notification = () => (\n    <ToastContainer\n        position=\"bottom-center\"\n        autoClose={5000}\n        hideProgressBar\n        newestOnTop\n        closeOnClick\n        rtl={false}\n        pauseOnFocusLoss\n        draggable={false}\n        pauseOnHover\n    />\n);\n\nconst NotificationSuccess = ({text}) => (\n    <div>\n        <i className=\"bi bi-check-circle-fill text-success mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst NotificationError = ({text}) => (\n    <div>\n        <i className=\"bi bi-x-circle-fill text-danger mx-2\"/>\n        <span className=\"text-secondary mx-1\">{text}</span>\n    </div>\n);\n\nconst Props = {\n    text: PropTypes.string,\n};\n\nconst DefaultProps = {\n    text: \"\",\n};\n\nNotificationSuccess.propTypes = Props;\nNotificationSuccess.defaultProps = DefaultProps;\n\nNotificationError.propTypes = Props;\nNotificationError.defaultProps = DefaultProps;\n\nexport {Notification, NotificationSuccess, NotificationError};","import React, {useEffect, useState} from \"react\";\nimport {toast} from \"react-toastify\";\nimport AddProduct from \"./AddProduct\";\nimport Product from \"./Product\";\nimport Loader from \"../utils/Loader\";\nimport {NotificationError, NotificationSuccess} from \"../utils/Notifications\";\nimport {buyProductAction, createProductAction, deleteProductAction, getProductsAction,} from \"../../utils/marketplace\";\nimport PropTypes from \"prop-types\";\nimport {Row} from \"react-bootstrap\";\n//...\n//...\nconst Products = ({address, fetchBalance}) => {\n    const [products, setProducts] = useState([]);\n    const [loading, setLoading] = useState(false);\n    \n    const getProducts = async () => {\n        setLoading(true);\n        getProductsAction()\n            .then(products => {\n                if (products) {\n                    setProducts(products);\n                }\n            })\n            .catch(error => {\n                console.log(error);\n            })\n            .finally(_ => {\n                setLoading(false);\n            });\n    };\n\n    useEffect(() => {\n        getProducts();\n    }, []);\n//...\n//...\nconst createProduct = async (data) => {\n    setLoading(true);\n    createProductAction(address, data)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Tender published successfully.\"/>);\n            getProducts();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error);\n            toast(<NotificationError text=\"Failed to publish a tender.\"/>);\n            setLoading(false);\n        })\n};\n//...\n//...\nconst buyProduct = async (product, count) => {\n    setLoading(true);\n    buyProductAction(address, product, count)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Applied for tender successfully\"/>);\n            getProducts();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error)\n            toast(<NotificationError text=\"Failed to apply for a tender.\"/>);\n            setLoading(false);\n        })\n};\n//...\n//...\nconst deleteProduct = async (product) => {\n    setLoading(true);\n    deleteProductAction(address, product.appId)\n        .then(() => {\n            toast(<NotificationSuccess text=\"Tender deleted successfully\"/>);\n            getProducts();\n            fetchBalance(address);\n        })\n        .catch(error => {\n            console.log(error)\n            toast(<NotificationError text=\"Failed to delete a tender.\"/>);\n            setLoading(false);\n        })\n};\n//...\n//...\nif (loading) {\n    return <Loader/>;\n}\nreturn (\n    <>\n        <div className=\"d-flex justify-content-between align-items-center mb-4\">\n            <h1 className=\"fs-4 fw-bold mb-0\">State Contracting Portal</h1>\n            <AddProduct createProduct={createProduct}/>\n        </div>\n        <Row xs={1} sm={2} lg={3} className=\"g-3 mb-5 g-xl-4 g-xxl-5\">\n            <>\n                {products.map((product, index) => (\n                    <Product\n                        address={address}\n                        product={product}\n                        buyProduct={buyProduct}\n                        deleteProduct={deleteProduct}\n                        key={index}\n                    />\n                ))}\n            </>\n        </Row>\n    </>\n);\n};\n\nProducts.propTypes = {\naddress: PropTypes.string.isRequired,\nfetchBalance: PropTypes.func.isRequired\n};\n\nexport default Products;","export default __webpack_public_path__ + \"static/media/govt.fd4138cf.jpg\";","import React, {useState} from \"react\";\nimport Cover from \"./components/Cover\";\nimport './App.css';\nimport Wallet from \"./components/Wallet\";\nimport {Container, Nav} from \"react-bootstrap\";\nimport Products from \"./components/marketplace/Products\";\nimport {Notification} from \"./components/utils/Notifications\";\nimport {indexerClient, myAlgoConnect} from \"./utils/constants\";\nimport coverImg from \"./assets/img/govt.jpg\"\n//..\n\n\nconst App = function AppWrapper() {\n\n  const [address, setAddress] = useState(null);\n  const [name, setName] = useState(null);\n  const [balance, setBalance] = useState(0);\n\n  const fetchBalance = async (accountAddress) => {\n      indexerClient.lookupAccountByID(accountAddress).do()\n          .then(response => {\n              const _balance = response.account.amount;\n              setBalance(_balance);\n          })\n          .catch(error => {\n              console.log(error);\n          });\n  };\n\n  const connectWallet = async () => {   \n      myAlgoConnect.connect()\n          .then(accounts => {\n              const _account = accounts[0];\n              setAddress(_account.address);\n              setName(_account.name);\n              fetchBalance(_account.address);\n          }).catch(error => {\n          console.log('Could not connect to MyAlgo wallet');\n          console.error(error);\n      })\n  };\n\n  const disconnect = () => {\n      setAddress(null);\n      setName(null);\n      setBalance(null);\n  };\n//..\nreturn (\n  <>\n      <Notification />\n      {address ? (\n          <Container fluid=\"md\">\n              <Nav className=\"justify-content-end pt-3 pb-5\">\n                  <Nav.Item>\n                      <Wallet\n                          address={address}\n                          name={name}\n                          amount={balance}\n                          disconnect={disconnect}\n                          symbol={\"ALGO\"}\n                      />\n                  </Nav.Item>\n              </Nav>\n              <main>\n                  <Products address={address} fetchBalance={fetchBalance}/>\n              </main>\n          </Container>\n      ) : (\n          <Cover name={\"State Contracting Portal\"} coverImg={coverImg} connect={connectWallet}/>\n      )}\n  </>\n);\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap-icons/font/bootstrap-icons.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();","import algosdk from \"algosdk\";\nimport {\n    algodClient,\n    indexerClient,\n    marketplaceNote,\n    minRound,\n    myAlgoConnect,\n    numGlobalBytes,\n    numGlobalInts,\n    numLocalBytes,\n    numLocalInts\n} from \"./constants\";\n/* eslint import/no-webpack-loader-syntax: off */\nimport approvalProgram from \"!!raw-loader!../contracts/marketplace_approval.teal\";\nimport clearProgram from \"!!raw-loader!../contracts/marketplace_clear.teal\";\nimport {base64ToUTF8String, utf8ToBase64String} from \"./conversions\";\n\nclass Product {\n    constructor(name, image, document, date, description, price, sold, appId, owner) {\n        this.name = name;\n        this.image = image;\n        this.document=document;\n        this.date=date;\n        this.description = description;\n        this.price = price;\n        this.sold = sold;\n        this.appId = appId;\n        this.owner = owner;\n    }\n}\n\n//...\n// Compile smart contract in .teal format to program\nconst compileProgram = async (programSource) => {\n    let encoder = new TextEncoder();\n    let programBytes = encoder.encode(programSource);\n    let compileResponse = await algodClient.compile(programBytes).do();\n    return new Uint8Array(Buffer.from(compileResponse.result, \"base64\"));\n}\n\n// CREATE PRODUCT: ApplicationCreateTxn\nexport const createProductAction = async (senderAddress, product) => {\n    console.log(\"Adding product...\")\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Compile programs\n    const compiledApprovalProgram = await compileProgram(approvalProgram)\n    const compiledClearProgram = await compileProgram(clearProgram)\n\n    // Build note to identify transaction later and required app args as Uint8Arrays\n    let note = new TextEncoder().encode(marketplaceNote);\n    let name = new TextEncoder().encode(product.name);\n    let image = new TextEncoder().encode(product.image);\n    let document = new TextEncoder().encode(product.document)\n    let date = new TextEncoder().encode(product.date)\n    let description = new TextEncoder().encode(product.description);\n    let price = algosdk.encodeUint64(product.price);\n\n    let appArgs = [name, image, document, date, description, price]\n\n    // Create ApplicationCreateTxn\n    let txn = algosdk.makeApplicationCreateTxnFromObject({\n        from: senderAddress,\n        suggestedParams: params,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        approvalProgram: compiledApprovalProgram,\n        clearProgram: compiledClearProgram,\n        numLocalInts: numLocalInts,\n        numLocalByteSlices: numLocalBytes,\n        numGlobalInts: numGlobalInts,\n        numGlobalByteSlices: numGlobalBytes,\n        note: note,\n        appArgs: appArgs\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get created application id and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['application-index'];\n    console.log(\"Created new app-id: \", appId);\n    return appId;\n}\n\n//...\n// BUY PRODUCT: Group transaction consisting of ApplicationCallTxn and PaymentTxn\nexport const buyProductAction = async (senderAddress, product, count) => {\n    console.log(\"Buying product...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Build required app args as Uint8Array\n    let buyArg = new TextEncoder().encode(\"buy\")\n    let countArg = algosdk.encodeUint64(count);\n    let appArgs = [buyArg, countArg]\n\n    // Create ApplicationCallTxn\n    let appCallTxn = algosdk.makeApplicationCallTxnFromObject({\n        from: senderAddress,\n        appIndex: product.appId,\n        onComplete: algosdk.OnApplicationComplete.NoOpOC,\n        suggestedParams: params,\n        appArgs: appArgs\n    })\n\n    // Create PaymentTxn\n    let paymentTxn = algosdk.makePaymentTxnWithSuggestedParamsFromObject({\n        from: senderAddress,\n        to: product.owner,\n        amount: product.price * count,\n        suggestedParams: params\n    })\n\n    let txnArray = [appCallTxn, paymentTxn]\n\n    // Create group transaction out of previously build transactions\n    let groupID = algosdk.computeGroupID(txnArray)\n    for (let i = 0; i < 2; i++) txnArray[i].group = groupID;\n\n    // Sign & submit the group transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txnArray.map(txn => txn.toByte()));\n    console.log(\"Signed group transaction\");\n    let tx = await algodClient.sendRawTransaction(signedTxn.map(txn => txn.blob)).do();\n\n    // Wait for group transaction to be confirmed\n    let confirmedTxn = await algosdk.waitForConfirmation(algodClient, tx.txId, 4);\n\n    // Notify about completion\n    console.log(\"Group transaction \" + tx.txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n}\n\n//...\n// DELETE PRODUCT: ApplicationDeleteTxn\nexport const deleteProductAction = async (senderAddress, index) => {\n    console.log(\"Deleting application...\");\n\n    let params = await algodClient.getTransactionParams().do();\n    params.fee = algosdk.ALGORAND_MIN_TX_FEE;\n    params.flatFee = true;\n\n    // Create ApplicationDeleteTxn\n    let txn = algosdk.makeApplicationDeleteTxnFromObject({\n        from: senderAddress, suggestedParams: params, appIndex: index,\n    });\n\n    // Get transaction ID\n    let txId = txn.txID().toString();\n\n    // Sign & submit the transaction\n    let signedTxn = await myAlgoConnect.signTransaction(txn.toByte());\n    console.log(\"Signed transaction with txID: %s\", txId);\n    await algodClient.sendRawTransaction(signedTxn.blob).do();\n\n    // Wait for transaction to be confirmed\n    const confirmedTxn = await algosdk.waitForConfirmation(algodClient, txId, 4);\n\n    // Get the completed Transaction\n    console.log(\"Transaction \" + txId + \" confirmed in round \" + confirmedTxn[\"confirmed-round\"]);\n\n    // Get application id of deleted application and notify about completion\n    let transactionResponse = await algodClient.pendingTransactionInformation(txId).do();\n    let appId = transactionResponse['txn']['txn'].apid;\n    console.log(\"Deleted app-id: \", appId);\n}\n\n//...\n// GET PRODUCTS: Use indexer\nexport const getProductsAction = async () => {\n    console.log(\"Fetching products...\")\n    let note = new TextEncoder().encode(marketplaceNote);\n    let encodedNote = Buffer.from(note).toString(\"base64\");\n\n    // Step 1: Get all transactions by notePrefix (+ minRound filter for performance)\n    let transactionInfo = await indexerClient.searchForTransactions()\n        .notePrefix(encodedNote)\n        .txType(\"appl\")\n        .minRound(minRound)\n        .do();\n    let products = []\n    for (const transaction of transactionInfo.transactions) {\n        let appId = transaction[\"created-application-index\"]\n        if (appId) {\n            // Step 2: Get each application by application id\n            let product = await getApplication(appId)\n            if (product) {\n                products.push(product)\n            }\n        }\n    }\n    console.log(\"Products fetched.\")\n    return products\n}\n\nconst getApplication = async (appId) => {\n    try {\n        // 1. Get application by appId\n        let response = await indexerClient.lookupApplications(appId).includeAll(true).do();\n        if (response.application.deleted) {\n            return null;\n        }\n        let globalState = response.application.params[\"global-state\"]\n\n        // 2. Parse fields of response and return product\n        let owner = response.application.params.creator\n        let name = \"\"\n        let image = \"\"\n        let document = \"\"\n        let date = \"\"\n        let description = \"\"\n        let price = 0\n        let sold = 0\n\n        const getField = (fieldName, globalState) => {\n            return globalState.find(state => {\n                return state.key === utf8ToBase64String(fieldName);\n            })\n        }\n\n        if (getField(\"NAME\", globalState) !== undefined) {\n            let field = getField(\"NAME\", globalState).value.bytes\n            name = base64ToUTF8String(field)\n        }\n\n        if (getField(\"IMAGE\", globalState) !== undefined) {\n            let field = getField(\"IMAGE\", globalState).value.bytes\n            image = base64ToUTF8String(field)\n        }\n        if (getField(\"DOCUMENT\", globalState) !== undefined) {\n            let field = getField(\"DOCUMENT\", globalState).value.bytes\n            document = base64ToUTF8String(field)\n        }\n        if (getField(\"DATE\", globalState) !== undefined) {\n            let field = getField(\"DATE\", globalState).value.bytes\n            date = base64ToUTF8String(field)\n        }\n\n        if (getField(\"DESCRIPTION\", globalState) !== undefined) {\n            let field = getField(\"DESCRIPTION\", globalState).value.bytes\n            description = base64ToUTF8String(field)\n        }\n\n        if (getField(\"PRICE\", globalState) !== undefined) {\n            price = getField(\"PRICE\", globalState).value.uint\n        }\n\n        if (getField(\"SOLD\", globalState) !== undefined) {\n            sold = getField(\"SOLD\", globalState).value.uint\n        }\n\n        return new Product(name, image, document, date, description, price, sold, appId, owner)\n    } catch (err) {\n        return null;\n    }\n}","import algosdk from \"algosdk\";\nimport MyAlgoConnect from \"@randlabs/myalgo-connect\";\n\nconst config = {\n    algodToken: \"\",\n    algodServer: \"https://node.testnet.algoexplorerapi.io\",\n    algodPort: \"\",\n    indexerToken: \"\",\n    indexerServer: \"https://algoindexer.testnet.algoexplorerapi.io\",\n    indexerPort: \"\",\n}\n\nexport const algodClient = new algosdk.Algodv2(config.algodToken, config.algodServer, config.algodPort)\n\nexport const indexerClient = new algosdk.Indexer(config.indexerToken, config.indexerServer, config.indexerPort);\n\nexport const myAlgoConnect = new MyAlgoConnect();\n\n// ...\nexport const minRound = 25394369;\n\n// https://github.com/algorandfoundation/ARCs/blob/main/ARCs/arc-0002.md\nexport const marketplaceNote = \"govtcontract:uv1\"\n\n// Maximum local storage allocation, immutable\nexport const numLocalInts = 0;\nexport const numLocalBytes = 0;\n// Maximum global storage allocation, immutable\nexport const numGlobalInts = 2; // Global variables stored as Int: count, sold\nexport const numGlobalBytes = 5; // Global variables stored as Bytes: name, description, image\n\n//...\nexport const ALGORAND_DECIMALS = 6;"],"sourceRoot":""}